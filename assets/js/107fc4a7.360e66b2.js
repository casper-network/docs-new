"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8417],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=l(n),h=o,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||r;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7234:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return c}});var a=n(3117),o=n(102),r=(n(7294),n(3905)),i=["components"],p={},s="Moving a Validating Node",l={unversionedId:"operators/advanced-topics/moving-node",id:"operators/advanced-topics/moving-node",title:"Moving a Validating Node",description:"This guide is for active validators who want to move their node to another machine. There are two primary methods to achieve this, outlined below.",source:"@site/source/docs/casper/operators/advanced-topics/moving-node.md",sourceDirName:"operators/advanced-topics",slug:"/operators/advanced-topics/moving-node",permalink:"/operators/advanced-topics/moving-node",draft:!1,editUrl:"https://github.com/casper-network/docs/tree/main/source/docs/casper/operators/advanced-topics/moving-node.md",tags:[],version:"current",lastUpdatedAt:1686299724,formattedLastUpdatedAt:"Jun 9, 2023",frontMatter:{},sidebar:"operators",previous:{title:"Archiving and Restoring a Database",permalink:"/operators/advanced-topics/archiving-and-restoring"}},d={},c=[{value:"Method One: Copying the Data to a New Location",id:"method-one-copying-the-data-to-a-new-location",level:2},{value:"Method Two: Swapping Keys with a Hot Backup",id:"method-two-swapping-keys-with-a-hot-backup",level:2},{value:"Preparation for swapping",id:"preparation-for-swapping",level:3},{value:"Swapping the nodes",id:"swapping-the-nodes",level:3},{value:"Understanding rewards impact",id:"understanding-rewards-impact",level:3},{value:"Checking file permissions",id:"checking-file-permissions",level:3}],u={toc:c},h="wrapper";function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)(h,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"moving-a-validating-node"},"Moving a Validating Node"),(0,r.kt)("p",null,"This guide is for active validators who want to move their node to another machine. There are two primary methods to achieve this, outlined below."),(0,r.kt)("h2",{id:"method-one-copying-the-data-to-a-new-location"},"Method One: Copying the Data to a New Location"),(0,r.kt)("p",null,"This method is simple but requires downtime. The node needs to download all the blocks generated while it is stopped."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Stop the node.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Copy the node's data to a new mount:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rsync -av --inplace --sparse  /var/lib/casper/ /new_mount\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Change the mount point.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Restart the node."))),(0,r.kt)("h2",{id:"method-two-swapping-keys-with-a-hot-backup"},"Method Two: Swapping Keys with a Hot Backup"),(0,r.kt)("p",null,"This method is a safer option, limiting downtime and enabling a smooth transition from the old to the new node. It keeps the node in sync with the tip of the chain."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Once a node is running (",(0,r.kt)("inlineCode",{parentName:"li"},"current_node"),"), create a second node (",(0,r.kt)("inlineCode",{parentName:"li"},"backup_node"),") on another machine. These two nodes will run in parallel."),(0,r.kt)("li",{parentName:"ol"},"When the ",(0,r.kt)("inlineCode",{parentName:"li"},"backup_node")," is up to date, stop both nodes."),(0,r.kt)("li",{parentName:"ol"},"Swap their associated keys."),(0,r.kt)("li",{parentName:"ol"},"Restart the ",(0,r.kt)("inlineCode",{parentName:"li"},"backup_node"),".")),(0,r.kt)("h3",{id:"preparation-for-swapping"},"Preparation for swapping"),(0,r.kt)("p",null,"Let both nodes synchronize to the tip of the blockchain. Keep the current validating node running with the original validator keyset."),(0,r.kt)("p",null,"Bond the ",(0,r.kt)("inlineCode",{parentName:"p"},"backup_node")," and wait until rewards are issued."),(0,r.kt)("p",null,"To swap keys:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the following folder structure on both nodes under the ",(0,r.kt)("inlineCode",{parentName:"li"},"/etc/casper/validator_keys/")," directory."),(0,r.kt)("li",{parentName:"ol"},"Create subdirectories for the ",(0,r.kt)("inlineCode",{parentName:"li"},"current_node")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"backup_node"),"."),(0,r.kt)("li",{parentName:"ol"},"Copy each node's keyset under the corresponding directories.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/etc/casper/validator_keys/\n\u251c\u2500\u2500 public_key.pem\n\u251c\u2500\u2500 public_key_hex\n\u251c\u2500\u2500 secret_key.pem\n\u251c\u2500\u2500 current_node\n\u2502   \u251c\u2500\u2500 public_key.pem\n\u2502   \u251c\u2500\u2500 public_key_hex\n\u2502   \u2514\u2500\u2500 secret_key.pem\n\u2514\u2500\u2500 backup_node\n|   \u251c\u2500\u2500 public_key.pem\n|   \u251c\u2500\u2500 public_key_hex\n|   \u2514\u2500\u2500 secret_key.pem\n")),(0,r.kt)("p",null,"This setup allows key swapping by running the ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo -u casper cp * ../")," command, as shown below."),(0,r.kt)("h3",{id:"swapping-the-nodes"},"Swapping the nodes"),(0,r.kt)("p",null,"On the ",(0,r.kt)("inlineCode",{parentName:"p"},"current_node"),", run these commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl stop casper-node-launcher\ncd /etc/casper/validator_keys/backup_node\nsudo -u casper cp * ../\n")),(0,r.kt)("p",null,"On the ",(0,r.kt)("inlineCode",{parentName:"p"},"backup_node")," (the future validator), run these commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl stop casper-node-launcher\ncd /etc/casper/validator_keys/current_node\nsudo -u casper cp * ../\nsudo systemctl start casper-node-launcher\n")),(0,r.kt)("p",null,"Restart the original validator node (",(0,r.kt)("inlineCode",{parentName:"p"},"current_node"),"), which is now the new backup:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl start casper-node-launcher\n")),(0,r.kt)("h3",{id:"understanding-rewards-impact"},"Understanding rewards impact"),(0,r.kt)("p",null,"After swapping, the new validator node shows no round length until an era transition occurs and will lose all rewards from the point of the switch until the end of that era. The validator is not ejected but will receive rewards starting with the next era."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You could time the swap right before the era ends to minimize reward losses.")),(0,r.kt)("h3",{id:"checking-file-permissions"},"Checking file permissions"),(0,r.kt)("p",null,"After the swap, check and fix file permissions by running the ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/casper/node_util.py")," utility."))}m.isMDXComponent=!0}}]);